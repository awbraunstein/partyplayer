// Generated by CoffeeScript 1.3.3

(function() {
  var Song, mongoose, partySchema, _;
  _ = require('lodash');
  mongoose = require('mongoose');
  mongoose.connect('mongodb://localhost/party');
  Song = {
    source: String,
    score: {
      type: Number,
      "default": 1
    },
    uri: String,
    timestamp: Date
  };
  partySchema = mongoose.Schema({
    name: String,
    loc: [Number],
    playing: {
      type: Song,
      "default": {}
    },
    songs: [Song]
  });
  partySchema.index({
    loc: "2d"
  });
  partySchema.methods.voteSong = function(song, increment) {
    var s, _i, _len, _ref;
    _ref = this.songs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (s === song) {
        s.score += increment;
      }
    }
    return this.save();
  };
  partySchema.methods.upvoteSong = function(song) {
    return partySchema.methods.voteSong(1);
  };
  partySchema.methods.upvoteSong = function(song) {
    return partySchema.methods.voteSong(-1);
  };
  partySchema.methods.addSong = function(song) {
    song.timestamp = Date.now();
    console.log(song);
    console.log(this.songs);
    this.songs.push(song);
    console.log(this.songs);
    return this.save();
  };
  partySchema.methods.playNextSong = function(song) {
    var next;
    if (this.songs.length !== 0) {
      next = _.max(this.songs, function(song) {
        return song.score;
      });
      this.songs = _.select(this.songs, function(song) {
        return song !== next;
      });
      this.playing = next;
      return this.save();
    }
  };
  return module.exports.Party = mongoose.model('Party', partySchema);
})();
